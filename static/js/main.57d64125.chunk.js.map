{"version":3,"sources":["reducers/products.js","reducers/product.js","reducers/index.js","components/ProductList.js","containers/ProductList.js","components/ProductEntry.js","containers/ProductEntry.js","actions/index.js","components/ProductPage.js","components/SimpleForm.js","App.js","serviceWorker.js","index.js"],"names":["prList","state","prData","ProductList","action","console","log","type","product","prn","event","target","name","prd","value","combineReducers","productList","text","lst","prdList","i","length","key","push","responsive","connect","ProductEntry","onChange","onProductAdd","md","label","e","onClick","color","dispatch","actions","nativeEvent","ProductPage","className","SimpleForm","f","form","title","controls","map","d","App","Navbar","bg","variant","Brand","to","Nav","Link","path","component","Boolean","window","location","hostname","match","store","createStore","expApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57d64125.chunk.js","sourcesContent":["import prData from '../prod-data.json'\n\nconst prList = (state = prData.ProductList, action) => {\n  console.log(\"action\",state);\n  switch (action.type) {\n    case 'ADD_PRODUCT':\n      return [\n        ...state,\n        action.product\n      ]\n    default:\n      return state\n  }\n}\n\nexport default prList","const product = (state = {}, action) => {\n  console.log(\"old state\",state);\n  switch (action.type) {\n    case 'ONCHANGE_PRODUCT':\n      let prn = action.event.target.name;\n      let prd = action.event.target.value;\n      return { ...state, [prn]: prd }\n    default:\n      return state;\n  }\n} \n\n\nexport default product","import productList from \"./products\";\nimport product from './product'\nimport { combineReducers } from 'redux'\n\nexport default combineReducers({\n  product,\n  productList\n});","import React from 'react';\nimport { MDBTable, MDBTableHead, MDBContainer } from 'mdbreact';\n\nconst ProductList = ({ productList }) => {\n  const wrapTd = (text) => {\n    return (<td>{text}</td>);\n  }\n\n  const lst = productList;\n  let prdList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let prd = [];\n    for (const key in lst[i]) {\n      if (key !== \"_id\") {\n        console.log(\"obj\", lst[i][key]);\n        prd.push(wrapTd(lst[i][key]));\n      }\n    }\n    prdList.push(<tr>{prd}</tr>);\n  }\n  return (\n    <MDBContainer>\n      <MDBTable responsive=\"sm\">\n        <MDBTableHead>\n          <tr>\n            <th>Product Name</th>\n            <th>MRP</th>\n            <th>Selling Price</th>\n            <th>Tax Percent</th>\n          </tr>\n        </MDBTableHead>\n        <tbody>{prdList}</tbody>\n      </MDBTable>\n    </MDBContainer>\n  )\n}\n\nexport default ProductList;","import { connect } from \"react-redux\";\nimport ProductList from \"../components/ProductList\";\n\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    ...state\n  }\n}\n\n\nexport default connect(\n  mapStateToProps,\n  null\n) (ProductList)","import React from 'react';\nimport { MDBContainer, MDBRow, MDBInput, MDBCol, MDBBtn, MDBCard, MDBCardBody, MDBCardHeader } from \"mdbreact\";\n\nconst ProductEntry = ({product, onChange, onProductAdd }) => (\n  <MDBContainer>\n    <MDBCard>\n      <MDBCardHeader>Sales Entry</MDBCardHeader>\n      <MDBCardBody>\n        <form>\n          <MDBRow>\n            <MDBCol md=\"2\">\n              <MDBInput label=\"Product\" name=\"ProductName\" onChange={e => onChange(e)}></MDBInput>\n            </MDBCol>\n            <MDBCol md=\"2\">\n              <MDBInput type=\"number\" name=\"MRP\" onChange={e => onChange(e)} label=\"MRP\"></MDBInput>\n            </MDBCol>\n            <MDBCol md=\"2\">\n              <MDBInput type=\"number\" name=\"SellingPrice\" onChange={e => onChange(e)} label=\"S.P\"></MDBInput>\n            </MDBCol>\n            <MDBCol md=\"2\">\n              <MDBInput type=\"number\" name=\"TaxPercent\" onChange={e => onChange(e)} label=\"GST %\"></MDBInput>\n            </MDBCol>\n            <MDBCol md=\"4\">\n              <MDBBtn onClick={() => onProductAdd(product)} color=\"primary\">Add</MDBBtn>\n            </MDBCol>\n          </MDBRow>\n        </form>\n      </MDBCardBody>\n    </MDBCard>\n  </MDBContainer>\n\n)\n\nexport default ProductEntry;","import * as actions from \"../actions\";\nimport ProductEntry from '../components/ProductEntry'\nimport { connect } from 'react-redux'\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    ...state\n  }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onChange: event => {\n      dispatch(actions.onProductChange(event.nativeEvent))\n    },\n    onProductAdd: product => {\n      dispatch(actions.addProduct(product))\n    }\n  }\n}\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ProductEntry)","\nexport const addProduct = product => ({\n  type: 'ADD_PRODUCT',\n  product\n})\n\n\nexport const onProductChange = event => ({\n  type: 'ONCHANGE_PRODUCT',\n  event\n})","import React from \"react\";\nimport ProductList from \"../containers/ProductList\";\nimport ProductEntry from \"../containers/ProductEntry\";\nimport { MDBContainer, MDBRow } from \"mdbreact\";\n\nconst ProductPage = () => (\n  <MDBContainer>\n    <MDBRow className=\"mt-3\">\n      <ProductEntry />\n    </MDBRow>\n    <MDBRow className=\"mt-3\">\n      <ProductList />\n    </MDBRow>\n  </MDBContainer>\n)\n\n\nexport default ProductPage;","import React from 'react';\nimport form from \"../about_form.json\";\nimport { MDBInput, MDBCard, MDBCardHeader, MDBCardBody } from 'mdbreact';\n\n\nconst getInputControl = (name, type) => (\n  <MDBInput type={type} label={name}></MDBInput>\n)\n\n\nconst SimpleForm = () => {\n  const f = form;\n  return (\n    <MDBCard>\n      <MDBCardHeader>{f.title}</MDBCardHeader>\n      <MDBCardBody>\n        <form>\n          {f.controls.map((d) => (getInputControl(d.name,d.type)))}\n        </form>\n      </MDBCardBody>\n    </MDBCard>\n  )\n}\n\n\nexport default SimpleForm;","import React from 'react';\nimport './App.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css'\nimport ProductPage from './components/ProductPage';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { MDBContainer } from 'mdbreact';\nimport SimpleForm from './components/SimpleForm';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand>\n          <LinkContainer to=\"/\">\n            <div>React-Exp</div>\n          </LinkContainer>\n        </Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <LinkContainer to=\"/form\">\n              <Nav.Link>Form</Nav.Link>\n            </LinkContainer>\n            <LinkContainer to=\"/product\">\n            <Nav.Link>Product</Nav.Link>\n            </LinkContainer>\n          </Nav>\n        </Navbar>\n        <MDBContainer>\n        <Route path=\"/product\" component={ProductPage} />\n        <Route path=\"/form\" component={SimpleForm} />\n        </MDBContainer>\n      </div>\n\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore } from \"redux\";\nimport expApp from \"./reducers\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(expApp);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}